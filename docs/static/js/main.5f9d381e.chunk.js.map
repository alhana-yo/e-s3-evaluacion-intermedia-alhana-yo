{"version":3,"sources":["components/Card.js","components/CardsList.js","App.js","serviceWorker.js","index.js"],"names":["Card","react_default","a","createElement","className","concat","this","props","name","src","urlImage","alt","types","map","type","index","Component","CardList","pokemonList","pokemon","Fragment","src_components_Card","url","id","evolution","App","CardsList","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mQAuCeA,0LAjCX,OACEC,EAAAC,EAAAC,cAAA,WAASC,UAAU,QACjBH,EAAAC,EAAAC,cAAA,OAAKC,UAAS,0BAAAC,OAA4BC,KAAKC,MAAMC,OACnDP,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cAAcK,IAAKH,KAAKC,MAAMG,SAAUC,IAAG,aAAAN,OAAeC,KAAKC,MAAMC,QAEpFP,EAAAC,EAAAC,cAAA,MAAIC,UAAU,cAAcE,KAAKC,MAAMC,MAEvCP,EAAAC,EAAAC,cAAA,MAAIC,UAAU,eAEXE,KAAKC,MAAMK,MAAMC,IAAI,SAACC,EAAMC,GAC3B,OACEd,EAAAC,EAAAC,cAAA,MAAIC,UAAS,0CAAAC,OAA4CU,IACvDd,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACZU,gBAfFE,cCmCJC,0LA9BP,IAAMC,EAAcZ,KAAKC,MAAMY,QAE/B,OAEIlB,EAAAC,EAAAC,cAACF,EAAAC,EAAMkB,SAAP,KACInB,EAAAC,EAAAC,cAAA,MAAIC,UAAU,qBAAd,uBACAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,eAETc,EAAYL,IAAI,SAAAM,GACb,OACIlB,EAAAC,EAAAC,cAAA,MAAIC,UAAU,wBACVH,EAAAC,EAAAC,cAACkB,EAAD,CACIX,SAAUS,EAAQG,IAClBd,KAAMW,EAAQX,KACdI,MAAOO,EAAQP,oBAjB5BI,cCDjBG,SAAU,CACd,CAAEI,GAAM,EAAGf,KAAQ,YAAaI,MAAS,CAAC,SAAU,SAAUY,UAAa,KAAMF,IAAO,kFACxF,CAAEC,GAAM,EAAGf,KAAQ,UAAWI,MAAS,CAAC,SAAU,SAAUY,UAAa,YAAaF,IAAO,kFAC7F,CAAEC,GAAM,EAAGf,KAAQ,WAAYI,MAAS,CAAC,SAAU,SAAUY,UAAa,UAAWF,IAAO,kFAC5F,CAAEC,GAAM,EAAGf,KAAQ,aAAcI,MAAS,CAAC,QAASY,UAAa,KAAMF,IAAO,kFAC9E,CAAEC,GAAM,EAAGf,KAAQ,aAAcI,MAAS,CAAC,QAASY,UAAa,aAAcF,IAAO,kFACtF,CAAEC,GAAM,EAAGf,KAAQ,YAAaI,MAAS,CAAC,SAAU,QAASY,UAAa,aAAcF,IAAO,kFAC/F,CAAEC,GAAM,EAAGf,KAAQ,WAAYI,MAAS,CAAC,SAAUY,UAAa,KAAMF,IAAO,kFAC7E,CAAEC,GAAM,EAAGf,KAAQ,YAAaI,MAAS,CAAC,SAAUY,UAAa,WAAYF,IAAO,kFACpF,CAAEC,GAAM,EAAGf,KAAQ,YAAaI,MAAS,CAAC,SAAUY,UAAa,YAAaF,IAAO,kFACrF,CAAEC,GAAM,GAAIf,KAAQ,WAAYI,MAAS,CAAC,OAAQY,UAAa,KAAMF,IAAO,qFAc/DG,mLATX,OACExB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,wBACbH,EAAAC,EAAAC,cAACuB,EAAD,CAAWP,QAASA,YAJVH,aCNEW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOhC,EAAAC,EAAAC,cAAC+B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.5f9d381e.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './Card.css';\n\n\nclass Card extends Component {\n  render() {\n    return (\n      <section className=\"card\">\n        <div className={`card__item card__item--${this.props.name}`}>\n          <img className=\"card__image\" src={this.props.urlImage} alt={`Imagen de ${this.props.name}`} />\n\n          <h2 className=\"card__name\">{this.props.name}</h2>\n\n          <ul className=\"card__types\">\n\n            {this.props.types.map((type, index) => {\n              return (\n                <li className={`card__type--element card__type--element${index}`}>\n                  <div className=\"type\">\n                    {type}\n                  \n                  </div>\n                  \n                </li>\n              );\n\n            })}\n\n          </ul>\n\n        </div>\n\n\n      </section>\n\n    );\n  }\n}\n\nexport default Card;\n","import React, { Component } from 'react';\nimport Card from './Card';\nimport './CardList.css';\n\n\n\nclass CardList extends Component {\n    render() {\n\n        const pokemonList = this.props.pokemon;\n\n        return (\n\n            <React.Fragment>\n                <h1 className=\"cards__list--name\">Mi lista de Pokemon</h1>\n                <ul className=\"cards__list\">\n\n                    {pokemonList.map(pokemon => {\n                        return (\n                            <li className=\"cards__list--element\">\n                                <Card \n                                    urlImage={pokemon.url}\n                                    name={pokemon.name}\n                                    types={pokemon.types}\n\n                                />\n                            </li>\n\n                        );\n\n                    })}\n\n                </ul>\n            </React.Fragment>\n\n        );\n    }\n}\n\nexport default CardList;\n","import React, { Component } from 'react';\nimport CardsList from './components/CardsList';\nimport './App.css';\n\n\nconst pokemon = [\n  { \"id\": 1, \"name\": \"bulbasaur\", \"types\": [\"poison\", \"grass\"], \"evolution\": null, \"url\": \"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/1.png\" },\n  { \"id\": 2, \"name\": \"ivysaur\", \"types\": [\"poison\", \"grass\"], \"evolution\": \"bulbasaur\", \"url\": \"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/2.png\" },\n  { \"id\": 3, \"name\": \"venusaur\", \"types\": [\"poison\", \"grass\"], \"evolution\": \"ivysaur\", \"url\": \"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/3.png\" },\n  { \"id\": 4, \"name\": \"charmander\", \"types\": [\"fire\"], \"evolution\": null, \"url\": \"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/4.png\" },\n  { \"id\": 5, \"name\": \"charmeleon\", \"types\": [\"fire\"], \"evolution\": \"charmander\", \"url\": \"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/5.png\" },\n  { \"id\": 6, \"name\": \"charizard\", \"types\": [\"flying\", \"fire\"], \"evolution\": \"charmeleon\", \"url\": \"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/6.png\" },\n  { \"id\": 7, \"name\": \"squirtle\", \"types\": [\"water\"], \"evolution\": null, \"url\": \"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/7.png\" },\n  { \"id\": 8, \"name\": \"wartortle\", \"types\": [\"water\"], \"evolution\": \"squirtle\", \"url\": \"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/8.png\" },\n  { \"id\": 9, \"name\": \"blastoise\", \"types\": [\"water\"], \"evolution\": \"wartortle\", \"url\": \"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/9.png\" },\n  { \"id\": 10, \"name\": \"caterpie\", \"types\": [\"bug\"], \"evolution\": null, \"url\": \"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/10.png\" }\n];\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"card-list__container\">\n        <CardsList pokemon={pokemon}/>\n      </div>\n      \n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}